// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session_tokens.sql

package database

import (
	"context"
)

const createSessionToken = `-- name: CreateSessionToken :exec
INSERT INTO session_tokens (
    user_id,
    token
) VALUES (
    $1,
    $2
)
`

type CreateSessionTokenParams struct {
	UserID int64
	Token  string
}

func (q *Queries) CreateSessionToken(ctx context.Context, arg CreateSessionTokenParams) error {
	_, err := q.db.ExecContext(ctx, createSessionToken, arg.UserID, arg.Token)
	return err
}

const deleteOldSessionTokens = `-- name: DeleteOldSessionTokens :exec
DELETE FROM session_tokens WHERE created < NOW() - $1::BIGINT * INTERVAL '1 seconds'
`

func (q *Queries) DeleteOldSessionTokens(ctx context.Context, dollar_1 int64) error {
	_, err := q.db.ExecContext(ctx, deleteOldSessionTokens, dollar_1)
	return err
}

const getSessionTokenByIDAndToken = `-- name: GetSessionTokenByIDAndToken :one
SELECT id, user_id, token, created FROM session_tokens WHERE session_tokens.user_id = $1 AND session_tokens.token = $2
`

type GetSessionTokenByIDAndTokenParams struct {
	UserID int64
	Token  string
}

func (q *Queries) GetSessionTokenByIDAndToken(ctx context.Context, arg GetSessionTokenByIDAndTokenParams) (SessionToken, error) {
	row := q.db.QueryRowContext(ctx, getSessionTokenByIDAndToken, arg.UserID, arg.Token)
	var i SessionToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Created,
	)
	return i, err
}
